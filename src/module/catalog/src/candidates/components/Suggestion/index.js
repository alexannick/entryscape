import { i18n } from 'esi18n';
import dateUtil from 'commons/util/dateUtil';
import { createSetState } from 'commons/util/util';
import {
  getTitle,
  getModifiedDate,
  getDescription,
} from 'commons/util/metadata';
import escaDatasetNLS from 'catalog/nls/escaDataset.nls';
// import bindActions from '../DistributionActions/actions';
import './index.scss';

export default (vnode) => {
  const { suggestionEntry } = vnode.attrs;
  const state = {
    isExpanded: false,
  };
  const setState = createSetState(state);
  // const actions = bindActions(distribution, dataset);

  // @scazan Phase II
  const expandDistribution = () => {
    setState({
      isExpanded: !state.isExpanded,
    });
  };

  /**
   * Gets a title from an entry with nls defaults in case there isn't one
   *
   * @param {store/Entry} entry
   * @returns {string}
   */
  const getSafeTitle = (entry) => {
    const title = getTitle(entry);

    if (title == null) {
      const namespaces = registry.get('namespaces');
      const escaDatasetLocalized = i18n.getLocalization(escaDatasetNLS);
      const downloadURI = getDownloadURI(entry);
      const subj = entry.getResourceURI();
      const metadata = entry.getMetadata();
      const source = metadata.findFirstValue(subj, namespaces.expand('dcterms:source'));

      if (downloadURI != null && downloadURI !== '') {
        return escaDatasetLocalized.defaultDownloadTitle;
      } else if (source != null && source !== '') {
        return escaDatasetLocalized.autoGeneratedAPI;
      }

      return escaDatasetLocalized.defaultAccessTitle;
    }

    return title;
  };

  const editSuggestion = (e) => {
    const target = e.target;
    const isDropdownClick = vnode.dom.querySelector('.ESDropdown').contains(target);
    if (!isDropdownClick) {
      actions.editDistribution(() => m.redraw());
    }
  };

  return {
    view(vnode) {
      const { suggestionEntry } = vnode.attrs;
      const title = getSafeTitle(distribution);
      const modificationDate = dateUtil.getMultipleDateFormats(getModifiedDate(distribution));
      // const description = getDescription(distribution);
      const description = 'The description';

      const expandedClass = state.isExpanded ? 'expanded' : '';
      // const distributionArrowClass = state.isExpanded ? 'fa-angle-up' : 'fa-angle-down';

      return (
        <div onclick={editSuggestion}>
          <div tabindex="0" class="distribution__row flex--sb">
            <div class="distribution__format">
              <p class="distribution__title">{title}</p>
              <p class="file__format">
                <span class="file__format--short">{format}</span>
              </p>
            </div>
            <div class="flex--sb">
              <p class="distribution__date">{modificationDate.short}</p>
            </div>
          </div>

          <div class={`distribution__expand ${expandedClass}`}>
            <div>
              <div class="flex--sb">
                <div class="metadata--wrapper">
                  { description &&
                    <div class="distribution__description">
                      <h2 class="title">Suggestion Title</h2>
                      <p class="text">
                        { description }
                      </p>
                    </div>
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    },
  };
};
